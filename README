This is a mirror of http://www.vim.org/scripts/script.php?script_id=5062

This is an industrial strength argument wrapping and unwrapping extension for the Vim text editor. It can be used for collapsing and expanding everything from function calls to array and dictionary definitions.

Below are examples of some common use cases demonstrating the capabilities of vim-argwrap. The extension functions the same way regardless if it is being used on a function call, list or dictionary definitions.

Let's first look at a simple function invocation. When there are many arguments being passed in, we may wish to wrap them to improve readability. If we position your cursor anywhere between the ( and ) parenthesis and execute the argwrap#toggle() command, the function call arguments will be wrapped to one per line.

Foo('wibble', 'wobble', 'wubble')

Foo(
    'wibble',
    'wobble',
    'wubble'
)

List definitions work in a similar fashion:

foo = ['bar', 'baz', 'qux', 'quux', 'corge']
foo = [
    'bar',
    'baz',
    'qux',
    'quux',
    'corge'
]

Dictionaries work just fine too:

foo = {'bar': 1, 'baz': 3, 'qux': 3, 'quux': 7}
foo = {
    'bar': 1,
    'baz': 3,
    'qux': 3,
    'quux': 7
}

Finally, nested combinations of all the above are also supported:

Foo(['wibble', 'wobble', 'wubble'], 'spam', {'bar': 'baz', qux: [1, 3, 3, 7]})
Foo(
    ['wibble', 'wobble', 'wubble'],
    'spam',
    {'bar': 'baz', 'qux': [1, 3, 3, 7]}
)

Foo(
    [
        'wibble',
        'wobble',
        'wubble'
    ],
    'spam',
    {
        'bar': 'baz',
        'qux': [
            1,
            3,
            3,
            7
        ]
    }
)

All of the above argument wrapping and unwrapping operations demonstrated above are toggle-able and correctly preserve the indentation of the surrounding code. This extension has been tested to work in scenarios of various complexity, but if you discover a problem let me know.

GitHub: https://github.com/FooSoft/vim-argwrap
